import { CallOverrides, Contract as EthersContract } from 'ethers/lib/ethers';
import { Result } from 'ethers/lib/utils';
import { GetContractArgs } from './getContract';
export declare type ReadContractArgs = Pick<GetContractArgs, 'addressOrName' | 'contractInterface'>;
export declare type ReadContractConfig = {
    /** Arguments to pass contract method */
    args?: any | any[];
    /** Chain id to use for provider */
    chainId?: number;
    /** Call overrides */
    overrides?: CallOverrides;
};
export declare type ReadContractResult = Result;
export declare function readContract<Contract extends EthersContract = EthersContract>(contractConfig: ReadContractArgs, functionName: string, { args, chainId, overrides }?: ReadContractConfig): Promise<Result>;
