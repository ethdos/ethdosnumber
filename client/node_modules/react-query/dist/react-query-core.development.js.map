{"version":3,"file":"react-query-core.development.js","sources":["../src/core/subscribable.ts","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/logger.ts","../src/core/notifyManager.ts","../src/core/removable.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/core/hydration.ts"],"sourcesContent":["type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.push(listener as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  FetchStatus,\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs<\n  TFilters extends MutationFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, mutationKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (\n    typeof fetchStatus !== 'undefined' &&\n    fetchStatus !== query.state.fetchStatus\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(a, b)\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void) {\n  sleep(0).then(callback)\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual?.(prevData, data)) {\n    return prevData as TData\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void\n) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport { CancelOptions, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => void\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = unknown>(\n  config: RetryerConfig<TData, TError>\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch(error => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn?.()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n","export interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\nexport const defaultLogger: Logger = console\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = callback => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Function>(callback: T): T => {\n    return ((...args: any[]) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000)\n    )\n  }\n\n  protected clearGcTimeout() {\n    clearTimeout(this.gcTimeout!)\n    this.gcTimeout = undefined\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import { getAbortController, noop, replaceData, timeUntilStale } from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n  FetchStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer, isCancelledError, canFetch, createRetryer } from './retryer'\nimport { Removable } from './removable'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.meta = config.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.meta = options?.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean }\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: data => {\n        if (typeof data === 'undefined') {\n          onError(new Error('Query data cannot be undefined') as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: state.fetchFailureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasInitialData = typeof options.initialData !== 'undefined'\n\n  const initialDataUpdatedAt = hasInitialData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  const hasData = typeof data !== 'undefined'\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta,\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey\n  >(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, Retryer, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n  meta: MutationMeta | undefined\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n    this.meta = config.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n    this.scheduleGc()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: () => {\n          this.dispatch({ type: 'failed' })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: state.failureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n","import { MutationObserver } from './mutationObserver'\nimport type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Action, Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>\n  ) => void\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>\n  ) => void\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ninterface NotifyEventMutationAdded {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationUpdated {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\ntype MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n      meta: options.meta,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\n\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal?.aborted) {\n                cancelled = true\n              } else {\n                context.signal?.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page =>\n            buildNewPages(pages, param, page, previous)\n          )\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i])\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n  functionalUpdate,\n} from './utils'\nimport type {\n  QueryClientConfig,\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport { defaultLogger, Logger } from './logger'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TData = unknown>(queryKey: QueryKey): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(filters: QueryFilters): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters\n  ): [QueryKey, TData][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TData\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions\n  ): TData | undefined {\n    const query = this.queryCache.find<TData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions\n  ): [QueryKey, TData | undefined][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions\n  ): [QueryKey, TData | undefined][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions\n  ): [QueryKey, TData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ])\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter(query => !query.isDisabled())\n        .map(query =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          })\n        )\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find(x =>\n      partialMatchKey(queryKey, x.queryKey)\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x =>\n        partialMatchKey(queryKey, x.queryKey)\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\n            `[QueryClient] Several query defaults match with key '${JSON.stringify(\n              queryKey\n            )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`\n          )\n        }\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find(x =>\n      partialMatchKey(mutationKey, x.mutationKey)\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x =>\n        partialMatchKey(mutationKey, x.mutationKey)\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\n            `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n              mutationKey\n            )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`\n          )\n        }\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId!)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId!)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            placeholderData = replaceData(\n              prevResult?.data,\n              placeholderData,\n              options\n            )\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect']\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach(match =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions)\n      )\n\n      const newObservers = newObserverMatches.map(match => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map(observer => [observer.options.queryHash, observer])\n      )\n      const newResult = newObservers.map(observer =>\n        observer.getCurrentResult()\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index]\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map(match =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions)\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[]\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map(options =>\n      this.client.defaultQueryOptions(options)\n    )\n\n    const matchingObservers: QueryObserverMatch[] = defaultedQueryOptions.flatMap(\n      defaultedOptions => {\n        const match = prevObservers.find(\n          observer => observer.options.queryHash === defaultedOptions.queryHash\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      }\n    )\n\n    const matchedQueryHashes = matchingObservers.map(\n      match => match.defaultedQueryOptions.queryHash\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      defaultedOptions =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash)\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      prevObserver =>\n        !matchingObservers.some(match => match.observer === prevObserver)\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      }\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport {\n  NotifyOptions,\n  ObserverFetchOptions,\n  QueryObserver,\n} from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {}\n): DehydratedState {\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach(mutation => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach(query => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state\n    )\n  })\n\n  queries.forEach(dehydratedQuery => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state\n    )\n  })\n}\n"],"names":["Subscribable","constructor","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","undefined","functionalUpdate","updater","input","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","mutationKey","hashQueryKey","status","hashFn","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","isPlainArray","aSize","bItems","bSize","equalItems","i","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","isError","Error","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","getAbortController","AbortController","replaceData","prevData","data","isDataEqual","structuralSharing","FocusManager","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","focused","setFocused","forEach","isFocused","document","includes","visibilityState","focusManager","OnlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","isRetryCancelled","isResolved","continueFn","promiseResolve","promiseReject","promise","outerResolve","outerReject","cancel","cancelOptions","reject","abort","cancelRetry","continueRetry","shouldPause","onSuccess","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","error","catch","retry","retryDelay","delay","shouldRetry","onFail","continue","defaultLogger","console","createNotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","originalQueue","setNotifyFunction","setBatchNotifyFunction","notifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","getDefaultState","meta","remove","setData","newData","dispatch","dataUpdatedAt","manual","setState","setStateOptions","retryer","reset","observer","enabled","isDisabled","getObserversCount","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","process","env","NODE_ENV","abortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","fetchFn","context","behavior","onFetch","revertState","fetchMeta","isFetchingOptimistic","action","reducer","fetchFailureCount","dataUpdateCount","errorUpdateCount","errorUpdatedAt","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","QueryCache","queries","queriesMap","build","client","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","executeMutation","mutationFn","variables","restored","onMutate","onSettled","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","aborted","buildNewPages","param","page","previous","fetchPage","queryFnResult","getNextPageParam","getPreviousPageParam","shouldFetchFirstPage","shouldFetchNextPage","finalPromise","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","isFetching","isMutating","getQueryData","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","parsedOptions","defaultedOptions","setQueriesData","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","refetchType","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","matchingDefaults","setMutationDefaults","_defaulted","refetchOnReconnect","useErrorBoundary","suspense","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","time","staleTimeoutId","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isLoading","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","size","includedProps","typedKey","changed","has","shouldLoadOnMount","retryOnMount","refetchOnMount","field","QueriesObserver","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","newObserversMap","fromEntries","newResult","hasIndexChange","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","sortMatchesByOrderOfQueries","concat","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","isIdle","dehydrateMutation","dehydrateQuery","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","dehydrate","dehydrateMutations","shouldDehydrateMutation","dehydrateQueries","shouldDehydrateQuery","hydrate","dehydratedState","dehydratedMutation","dehydratedQuery"],"mappings":"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"}