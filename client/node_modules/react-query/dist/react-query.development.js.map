{"version":3,"file":"react-query.development.js","sources":["../src/core/subscribable.ts","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/logger.ts","../src/core/notifyManager.ts","../src/core/removable.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/core/hydration.ts","../src/reactjs/QueryClientProvider.tsx","../src/reactjs/QueryErrorResetBoundary.tsx","../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js","../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js","../node_modules/use-sync-external-store/shim/index.js","../src/reactjs/useSyncExternalStore.ts","../src/reactjs/useIsFetching.ts","../src/reactjs/useIsMutating.ts","../src/reactjs/utils.ts","../src/reactjs/useMutation.ts","../src/reactjs/isRestoring.tsx","../src/reactjs/useBaseQuery.ts","../src/reactjs/useQuery.ts","../src/reactjs/useQueries.ts","../src/reactjs/useInfiniteQuery.ts","../src/reactjs/Hydrate.tsx"],"sourcesContent":["type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.push(listener as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  FetchStatus,\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs<\n  TFilters extends MutationFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, mutationKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (\n    typeof fetchStatus !== 'undefined' &&\n    fetchStatus !== query.state.fetchStatus\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(a, b)\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void) {\n  sleep(0).then(callback)\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual?.(prevData, data)) {\n    return prevData as TData\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void\n) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport { CancelOptions, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => void\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = unknown>(\n  config: RetryerConfig<TData, TError>\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch(error => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn?.()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n","export interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\nexport const defaultLogger: Logger = console\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = callback => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Function>(callback: T): T => {\n    return ((...args: any[]) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000)\n    )\n  }\n\n  protected clearGcTimeout() {\n    clearTimeout(this.gcTimeout!)\n    this.gcTimeout = undefined\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import { getAbortController, noop, replaceData, timeUntilStale } from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n  FetchStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer, isCancelledError, canFetch, createRetryer } from './retryer'\nimport { Removable } from './removable'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.meta = config.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.meta = options?.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean }\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: data => {\n        if (typeof data === 'undefined') {\n          onError(new Error('Query data cannot be undefined') as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: state.fetchFailureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasInitialData = typeof options.initialData !== 'undefined'\n\n  const initialDataUpdatedAt = hasInitialData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  const hasData = typeof data !== 'undefined'\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta,\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey\n  >(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, Retryer, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n  meta: MutationMeta | undefined\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n    this.meta = config.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n    this.scheduleGc()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: () => {\n          this.dispatch({ type: 'failed' })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: state.failureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n","import { MutationObserver } from './mutationObserver'\nimport type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Action, Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>\n  ) => void\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>\n  ) => void\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ninterface NotifyEventMutationAdded {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationUpdated {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\ntype MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n      meta: options.meta,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\n\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal?.aborted) {\n                cancelled = true\n              } else {\n                context.signal?.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page =>\n            buildNewPages(pages, param, page, previous)\n          )\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i])\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n  functionalUpdate,\n} from './utils'\nimport type {\n  QueryClientConfig,\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport { defaultLogger, Logger } from './logger'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TData = unknown>(queryKey: QueryKey): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(filters: QueryFilters): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters\n  ): [QueryKey, TData][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TData\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions\n  ): TData | undefined {\n    const query = this.queryCache.find<TData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions\n  ): [QueryKey, TData | undefined][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions\n  ): [QueryKey, TData | undefined][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions\n  ): [QueryKey, TData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ])\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter(query => !query.isDisabled())\n        .map(query =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          })\n        )\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find(x =>\n      partialMatchKey(queryKey, x.queryKey)\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x =>\n        partialMatchKey(queryKey, x.queryKey)\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\n            `[QueryClient] Several query defaults match with key '${JSON.stringify(\n              queryKey\n            )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`\n          )\n        }\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find(x =>\n      partialMatchKey(mutationKey, x.mutationKey)\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x =>\n        partialMatchKey(mutationKey, x.mutationKey)\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\n            `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n              mutationKey\n            )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`\n          )\n        }\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId!)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId!)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            placeholderData = replaceData(\n              prevResult?.data,\n              placeholderData,\n              options\n            )\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect']\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach(match =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions)\n      )\n\n      const newObservers = newObserverMatches.map(match => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map(observer => [observer.options.queryHash, observer])\n      )\n      const newResult = newObservers.map(observer =>\n        observer.getCurrentResult()\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index]\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map(match =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions)\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[]\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map(options =>\n      this.client.defaultQueryOptions(options)\n    )\n\n    const matchingObservers: QueryObserverMatch[] = defaultedQueryOptions.flatMap(\n      defaultedOptions => {\n        const match = prevObservers.find(\n          observer => observer.options.queryHash === defaultedOptions.queryHash\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      }\n    )\n\n    const matchedQueryHashes = matchingObservers.map(\n      match => match.defaultedQueryOptions.queryHash\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      defaultedOptions =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash)\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      prevObserver =>\n        !matchingObservers.some(match => match.observer === prevObserver)\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      }\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport {\n  NotifyOptions,\n  ObserverFetchOptions,\n  QueryObserver,\n} from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {}\n): DehydratedState {\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach(mutation => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach(query => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state\n    )\n  })\n\n  queries.forEach(dehydratedQuery => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state\n    )\n  })\n}\n","import React from 'react'\n\nimport { QueryClient } from '../core'\nimport { ContextOptions } from '../reactjs/types'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nexport const defaultContext = React.createContext<QueryClient | undefined>(\n  undefined\n)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(\n  context: React.Context<QueryClient | undefined> | undefined,\n  contextSharing: boolean\n) {\n  if (context) {\n    return context\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = ({ context }: ContextOptions = {}) => {\n  const queryClient = React.useContext(\n    getQueryClientContext(context, React.useContext(QueryClientSharingContext))\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\ntype QueryClientProviderPropsBase = {\n  client: QueryClient\n  children?: React.ReactNode\n}\ntype QueryClientProviderPropsWithContext = ContextOptions & {\n  contextSharing?: never\n} & QueryClientProviderPropsBase\ntype QueryClientProviderPropsWithContextSharing = {\n  context?: never\n  contextSharing?: boolean\n} & QueryClientProviderPropsBase\n\nexport type QueryClientProviderProps =\n  | QueryClientProviderPropsWithContext\n  | QueryClientProviderPropsWithContextSharing\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext(context, contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={!context && contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n","import React from 'react'\n\n// CONTEXT\n\ninterface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n","/**\n * @license React\n * use-sync-external-store-shim.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var React = require('react');\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\n// dispatch for CommonJS interop named imports.\n\nvar useState = React.useState,\n    useEffect = React.useEffect,\n    useLayoutEffect = React.useLayoutEffect,\n    useDebugValue = React.useDebugValue;\nvar didWarnOld18Alpha = false;\nvar didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\n\nfunction useSyncExternalStore(subscribe, getSnapshot, // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n// React do not expose a way to check if we're hydrating. So users of the shim\n// will need to track that themselves and return the correct value\n// from `getSnapshot`.\ngetServerSnapshot) {\n  {\n    if (!didWarnOld18Alpha) {\n      if (React.startTransition !== undefined) {\n        didWarnOld18Alpha = true;\n\n        error('You are using an outdated, pre-release alpha of React 18 that ' + 'does not support useSyncExternalStore. The ' + 'use-sync-external-store shim will not work correctly. Upgrade ' + 'to a newer pre-release.');\n      }\n    }\n  } // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n\n\n  var value = getSnapshot();\n\n  {\n    if (!didWarnUncachedGetSnapshot) {\n      var cachedValue = getSnapshot();\n\n      if (!objectIs(value, cachedValue)) {\n        error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  } // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n\n\n  var _useState = useState({\n    inst: {\n      value: value,\n      getSnapshot: getSnapshot\n    }\n  }),\n      inst = _useState[0].inst,\n      forceUpdate = _useState[1]; // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n\n\n  useLayoutEffect(function () {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({\n        inst: inst\n      });\n    }\n  }, [subscribe, value, getSnapshot]);\n  useEffect(function () {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({\n        inst: inst\n      });\n    }\n\n    var handleStoreChange = function () {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({\n          inst: inst\n        });\n      }\n    }; // Subscribe to the store and return a clean-up function.\n\n\n    return subscribe(handleStoreChange);\n  }, [subscribe]);\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  var prevValue = inst.value;\n\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot();\n}\n\nvar canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');\n\nvar isServerEnvironment = !canUseDOM;\n\nvar shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;\nvar useSyncExternalStore$2 = React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;\n\nexports.useSyncExternalStore = useSyncExternalStore$2;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","import pkg from 'use-sync-external-store/shim/index.js'\nexport const useSyncExternalStore = pkg.useSyncExternalStore\n","import React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { ContextOptions } from './types'\nimport { QueryKey, notifyManager } from '../core'\nimport { parseFilterArgs, QueryFilters } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      onStoreChange =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache]\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters)\n  )\n}\n","import React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { MutationKey } from '../core/types'\nimport { ContextOptions } from '../reactjs/types'\nimport { MutationFilters, parseMutationFilterArgs } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      onStoreChange =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache]\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters)\n  )\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { notifyManager } from '../core'\nimport { noop, parseMutationArgs } from '../core/utils'\nimport { MutationObserver } from '../core/mutationObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { MutationFunction, MutationKey } from '../core/types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options\n      )\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      onStoreChange =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer]\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n","import React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { QueryKey, notifyManager, QueryObserver } from '../core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\nimport { shouldThrowError } from './utils'\nimport { useIsRestoring } from './isRestoring'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false\n    }\n  }\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions\n      )\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      onStoreChange =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  )\n\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (\n    defaultedOptions.suspense &&\n    result.isLoading &&\n    result.isFetching &&\n    !isRestoring\n  ) {\n    throw observer\n      .fetchOptimistic(defaultedOptions)\n      .then(({ data }) => {\n        defaultedOptions.onSuccess?.(data as TData)\n        defaultedOptions.onSettled?.(data, null)\n      })\n      .catch(error => {\n        errorResetBoundary.clearReset()\n        defaultedOptions.onError?.(error)\n        defaultedOptions.onSettled?.(undefined, error)\n      })\n  }\n\n  // Handle error boundary\n  if (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(defaultedOptions.useErrorBoundary, [\n      result.error,\n      observer.getCurrentQuery(),\n    ])\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","import { QueryObserver } from '../core'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","import React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { QueryKey, QueryFunction } from '../core/types'\nimport { notifyManager } from '../core/notifyManager'\nimport { QueriesObserver } from '../core/queriesObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useIsRestoring } from './isRestoring'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'context'>\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptionsForUseQueries<\n        TQueryFnData,\n        unknown,\n        TQueryFnData,\n        TQueryKey\n      >\n    : // Fallback\n      UseQueryOptionsForUseQueries\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = []\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptionsForUseQueries[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptionsForUseQueries[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = []\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  context,\n}: {\n  queries: readonly [...QueriesOptions<T>]\n  context?: UseQueryOptions['context']\n}): QueriesResults<T> {\n  const queryClient = useQueryClient({ context })\n  const isRestoring = useIsRestoring()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map(options => {\n        const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, queryClient, isRestoring]\n  )\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries)\n  )\n\n  const result = observer.getOptimisticResult(defaultedQueries)\n\n  useSyncExternalStore(\n    React.useCallback(\n      onStoreChange =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  return result as QueriesResults<T>\n}\n","import { QueryObserver } from '../core'\nimport { InfiniteQueryObserver } from '../core/infiniteQueryObserver'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n","import React from 'react'\n\nimport { hydrate, HydrateOptions } from '../core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { ContextOptions } from './types'\n\nexport function useHydrate(\n  state: unknown,\n  options: HydrateOptions & ContextOptions = {}\n) {\n  const queryClient = useQueryClient({ context: options.context })\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n}\n\nexport const Hydrate = ({ children, options, state }: HydrateProps) => {\n  useHydrate(state, options)\n  return children as React.ReactElement\n}\n"],"names":["Subscribable","constructor","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","undefined","functionalUpdate","updater","input","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","parseMutationFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","hashQueryKey","status","hashFn","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","isPlainArray","aSize","bItems","bSize","equalItems","i","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","isError","Error","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","getAbortController","AbortController","replaceData","prevData","data","isDataEqual","structuralSharing","FocusManager","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","focused","setFocused","forEach","isFocused","document","includes","visibilityState","focusManager","OnlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","isRetryCancelled","isResolved","continueFn","promiseResolve","promiseReject","promise","outerResolve","outerReject","cancel","cancelOptions","reject","abort","cancelRetry","continueRetry","shouldPause","onSuccess","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","error","catch","retry","retryDelay","delay","shouldRetry","onFail","continue","defaultLogger","console","createNotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","originalQueue","setNotifyFunction","setBatchNotifyFunction","notifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","getDefaultState","meta","remove","setData","newData","dispatch","dataUpdatedAt","manual","setState","setStateOptions","retryer","reset","observer","enabled","isDisabled","getObserversCount","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","process","env","NODE_ENV","abortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","fetchFn","context","behavior","onFetch","revertState","fetchMeta","isFetchingOptimistic","action","reducer","fetchFailureCount","dataUpdateCount","errorUpdateCount","errorUpdatedAt","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","QueryCache","queries","queriesMap","build","client","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","executeMutation","variables","restored","onMutate","onSettled","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","aborted","buildNewPages","param","page","previous","fetchPage","queryFnResult","getNextPageParam","getPreviousPageParam","shouldFetchFirstPage","shouldFetchNextPage","finalPromise","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","isFetching","isMutating","getQueryData","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","parsedOptions","defaultedOptions","setQueriesData","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","refetchType","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","matchingDefaults","setMutationDefaults","_defaulted","refetchOnReconnect","useErrorBoundary","suspense","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","time","staleTimeoutId","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isLoading","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","size","includedProps","typedKey","changed","has","shouldLoadOnMount","retryOnMount","refetchOnMount","field","QueriesObserver","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","newObserversMap","fromEntries","newResult","hasIndexChange","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","sortMatchesByOrderOfQueries","concat","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","isIdle","dehydrateMutation","dehydrateQuery","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","dehydrate","dehydrateMutations","shouldDehydrateMutation","dehydrateQueries","shouldDehydrateQuery","hydrate","dehydratedState","dehydratedMutation","dehydratedQuery","defaultContext","React","createContext","QueryClientSharingContext","getQueryClientContext","contextSharing","ReactQueryClientContext","useQueryClient","queryClient","useContext","QueryClientProvider","children","useEffect","Context","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","QueryErrorResetBoundary","useState","e","require","h","k","is","l","m","n","useLayoutEffect","p","useDebugValue","q","d","f","inst","getSnapshot","c","g","r","t","u","createElement","exports","useSyncExternalStore","__REACT_DEVTOOLS_GLOBAL_HOOK__","registerInternalModuleStart","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","format","_len2","arguments","_key2","printWarning","level","ReactDebugCurrentFrame","stack","getStackAddendum","argsWithFormat","item","String","unshift","Function","apply","y","objectIs","didWarnOld18Alpha","didWarnUncachedGetSnapshot","getServerSnapshot","startTransition","cachedValue","_useState","forceUpdate","checkIfSnapshotChanged","handleStoreChange","latestGetSnapshot","prevValue","nextValue","useSyncExternalStore$1","canUseDOM","isServerEnvironment","shim","useSyncExternalStore$2","registerInternalModuleStop","module","pkg","useIsFetching","useCallback","onStoreChange","useIsMutating","shouldThrowError","_useErrorBoundary","params","useMutation","mutateAsync","IsRestoringContext","useIsRestoring","Provider","useBaseQuery","Observer","isRestoring","errorResetBoundary","useQuery","useQueries","defaultedQueries","useMemo","useInfiniteQuery","useHydrate","optionsRef","useRef","current","Hydrate"],"mappings":"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"}