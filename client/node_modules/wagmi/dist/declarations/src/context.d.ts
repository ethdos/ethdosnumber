import * as React from 'react';
import { ClientConfig, Provider, Client as VanillaClient, WebSocketProvider } from '@wagmi/core';
import { QueryClient } from 'react-query';
import { Persister } from 'react-query/persistQueryClient';
export declare type CreateClientConfig<TProvider extends Provider = Provider, TWebSocketProvider extends WebSocketProvider = WebSocketProvider> = ClientConfig<TProvider, TWebSocketProvider> & {
    queryClient?: QueryClient;
    persister?: Persister;
};
export declare function createClient<TProvider extends Provider, TWebSocketProvider extends WebSocketProvider>({ queryClient, persister, ...config }?: CreateClientConfig<TProvider, TWebSocketProvider>): VanillaClient<TProvider, TWebSocketProvider> & {
    queryClient: QueryClient;
};
export declare type Client<TProvider extends Provider = Provider, TWebSocketProvider extends WebSocketProvider = WebSocketProvider> = VanillaClient<TProvider, TWebSocketProvider> & {
    queryClient: QueryClient;
};
export declare const Context: React.Context<Client<import("@ethersproject/providers").BaseProvider, import("@ethersproject/providers").WebSocketProvider> | undefined>;
export declare type WagmiConfigProps<TProvider extends Provider = Provider, TWebSocketProvider extends WebSocketProvider = WebSocketProvider> = {
    /** React-decorated Client instance */
    client?: Client<TProvider, TWebSocketProvider>;
};
export declare function WagmiConfig<TProvider extends Provider, TWebSocketProvider extends WebSocketProvider>({ children, client, }: React.PropsWithChildren<WagmiConfigProps<TProvider, TWebSocketProvider>>): JSX.Element;
export declare function useClient<TProvider extends Provider, TWebSocketProvider extends WebSocketProvider = WebSocketProvider>(): Client<TProvider, TWebSocketProvider>;
